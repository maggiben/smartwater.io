#include <Arduino.h>
#include <avr/wdt.h>
#include <SerialCommands.h>
#include <Wire.h>
#include <SPI.h>
#include <TimeLib.h>
#include <TimeAlarms.h>
#include <U8g2lib.h>
U8G2_SSD1306_128X64_NONAME_1_HW_I2C u8g2(U8G2_R0);    // I2C
#include "RTClib.h"
RTC_DS1307 rtc;
#include "./assets/assets.h"

#define BUF_LENGTH 128  /* Buffer for the incoming command. */
//Create a 32 bytes static buffer to be used exclusive by SerialCommands object.
//The size should accomodate command token, arguments, termination sequence and string delimeter \0 char.
char serialCommandBuffer[32];

struct Alarms { 
  uint8_t alarm[MAX_ALARMS][ALARM_DATA_STORE] = {
    { dowSunday, 14, 30, 0 }, 
    { dowTuesday, 14, 30, 0 },
    { dowThursday, 14, 30, 0 },
    { dowSaturday, 14, 30, 0 }
  };
};

//Creates SerialCommands object attached to Serial
//working buffer = serial_command_buffer_
//command delimeter: Cr & Lf
//argument delimeter: SPACE
SerialCommands serialCommands(&Serial, serialCommandBuffer, sizeof(serialCommandBuffer), "\r\n", " ");

int ltsPerMinute = 1.5;
// set all moisture sensors PIN ID
int moinsture[4] = { A0, A1, A2, A3 };
int moisture1 = A0;
int moisture2 = A1;
int moisture3 = A2;
int moisture4 = A3;

// declare moisture values
int moisture_value[4] = { 0, 0, 0, 0};
int moisture1_value = 0;
int moisture2_value = 0;
int moisture3_value = 0;
int moisture4_value = 0;

// set water relays
uint8_t relays[4] = { 6, 8, 9, 10 };

// set water pump
uint8_t pump = 4;

// set button
uint8_t button = 12;

//pump state    1:open   0:close
bool pump_state_flag = false;

//relay1 state    1:open   0:close
bool relay_state_flag[4] = { false, false, false, false };

char daysOfTheWeek[7][12] = {"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"};

struct MoiustureSensorData {
  long data[4];
};

struct PrinterPos {
  uint8_t x;
  uint8_t y;
};

struct PrinterPosOther {
  int x;
  int y;
  int other;
};

struct TimerActive {
  bool isTimerActive = false;
};

struct SensorCalibration {
  uint8_t min;
  uint8_t max;
};

// good flower
const unsigned char bitmap_good[] U8X8_PROGMEM = {
  // 0x00, 0x42, 0x4C, 0x00, 0x00, 0xE6, 0x6E, 0x00, 0x00, 0xAE, 0x7B, 0x00, 0x00, 0x3A, 0x51, 0x00,
  // 0x00, 0x12, 0x40, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x06, 0x40, 0x00, 0x00, 0x06, 0x40, 0x00,
  // 0x00, 0x04, 0x60, 0x00, 0x00, 0x0C, 0x20, 0x00, 0x00, 0x08, 0x30, 0x00, 0x00, 0x18, 0x18, 0x00,
  // 0x00, 0xE0, 0x0F, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00,
  // 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x02, 0xC1, 0x00, 0x00, 0x0E, 0x61, 0x00,
  // 0x00, 0x1C, 0x79, 0x00, 0x00, 0x34, 0x29, 0x00, 0x00, 0x28, 0x35, 0x00, 0x00, 0x48, 0x17, 0x00,
  // 0x00, 0xD8, 0x1B, 0x00, 0x00, 0x90, 0x1B, 0x00, 0x00, 0xB0, 0x09, 0x00, 0x00, 0xA0, 0x05, 0x00,
  // 0x00, 0xE0, 0x07, 0x00, 0x00, 0xC0, 0x03, 0x00
};

// bad flower
const unsigned char bitmap_bad[] U8X8_PROGMEM = {
  // 0x00, 0x80, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0xE0, 0x0D, 0x00, 0x00, 0xA0, 0x0F, 0x00,
  // 0x00, 0x20, 0x69, 0x00, 0x00, 0x10, 0x78, 0x02, 0x00, 0x10, 0xC0, 0x03, 0x00, 0x10, 0xC0, 0x03,
  // 0x00, 0x10, 0x00, 0x01, 0x00, 0x10, 0x80, 0x00, 0x00, 0x10, 0xC0, 0x00, 0x00, 0x30, 0x60, 0x00,
  // 0x00, 0x60, 0x30, 0x00, 0x00, 0xC0, 0x1F, 0x00, 0x00, 0x60, 0x07, 0x00, 0x00, 0x60, 0x00, 0x00,
  // 0x00, 0x60, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  // 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0xC7, 0x1C, 0x00,
  // 0x80, 0x68, 0x66, 0x00, 0xC0, 0x33, 0x7B, 0x00, 0x40, 0xB6, 0x4D, 0x00, 0x00, 0xE8, 0x06, 0x00,
  // 0x00, 0xF0, 0x03, 0x00, 0x00, 0xE0, 0x00, 0x00
};

// Flower Logo
// static unsigned char bitmap_logo[] U8G_PROGMEM = {
//   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0,
//   0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0x00,
//   0x00, 0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe,
//   0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00,
//   0x00, 0x00, 0x80, 0x3f, 0xfc, 0x01, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x1f,
//   0xf8, 0x03, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x0f, 0xf0, 0x03, 0x00, 0x00,
//   0x00, 0x00, 0xe0, 0x07, 0xe0, 0x07, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x03,
//   0xc0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x03, 0xc0, 0x0f, 0x00, 0x00,
//   0x00, 0x00, 0xf0, 0x01, 0x80, 0x1f, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x01,
//   0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x1f, 0x00, 0x00,
//   0x00, 0xe0, 0xff, 0x00, 0x00, 0xff, 0x01, 0x00, 0x00, 0xff, 0x7f, 0x00,
//   0x00, 0xfe, 0x7f, 0x00, 0xc0, 0xff, 0x7f, 0x00, 0x00, 0xfe, 0xff, 0x01,
//   0xf0, 0xff, 0x7f, 0x00, 0x00, 0xfe, 0xff, 0x07, 0xf8, 0xff, 0x3f, 0x00,
//   0x00, 0xfc, 0xff, 0x1f, 0xfc, 0x1f, 0x30, 0x00, 0x00, 0x00, 0xfe, 0x3f,
//   0xfc, 0x01, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x3f, 0x7e, 0x00, 0x00, 0x80,
//   0x01, 0x00, 0x00, 0x7f, 0x3e, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x00, 0x7c,
//   0x3f, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x00, 0xfc, 0x1f, 0x00, 0x00, 0xc0,
//   0x03, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x00, 0xf8,
//   0x1f, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0xc0,
//   0x01, 0x00, 0x00, 0xf8, 0x3f, 0x00, 0xc0, 0x87, 0xe1, 0x03, 0x00, 0x7c,
//   0x3e, 0x00, 0xc0, 0x9f, 0xf9, 0x03, 0x00, 0x7c, 0x7e, 0x00, 0xc0, 0xbf,
//   0xfd, 0x03, 0x00, 0x7e, 0xfc, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x3f,
//   0xfc, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x80, 0x3f, 0xf8, 0x01, 0x00, 0xc0,
//   0x03, 0x00, 0xc0, 0x1f, 0xf0, 0x07, 0x00, 0x70, 0x0e, 0x00, 0xe0, 0x0f,
//   0xf0, 0x0f, 0x00, 0x70, 0x1e, 0x00, 0xf0, 0x07, 0xe0, 0x1f, 0x00, 0x78,
//   0x1e, 0x00, 0xf8, 0x03, 0xc0, 0x7f, 0x00, 0x3c, 0x3c, 0x00, 0xfe, 0x01,
//   0x80, 0xff, 0x00, 0x1e, 0x7c, 0x00, 0xff, 0x00, 0x00, 0xfe, 0x00, 0x1e,
//   0x78, 0x00, 0x7e, 0x00, 0x00, 0x7c, 0x00, 0x0e, 0x70, 0x00, 0x3e, 0x00,
//   0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x7e, 0x00, 0x00,
//   0x00, 0x00, 0x7c, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00,
//   0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x3e, 0x00, 0x00,
//   0x00, 0x00, 0x7c, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00,
//   0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x1f, 0x00, 0x00,
//   0x00, 0x00, 0xf8, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00,
//   0x00, 0x1f, 0x00, 0x80, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x1f, 0x00, 0xc0,
//   0x03, 0x00, 0xf8, 0x00, 0x00, 0x3e, 0x00, 0xe0, 0x07, 0x00, 0x7c, 0x00,
//   0x00, 0x3e, 0x00, 0xf8, 0x1f, 0x00, 0x7c, 0x00, 0x00, 0x3e, 0x00, 0xfc,
//   0x7f, 0x00, 0x7c, 0x00, 0x00, 0x7e, 0x00, 0xff, 0xff, 0x01, 0x7e, 0x00,
//   0x00, 0xfc, 0xc0, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0xfc, 0xff, 0x3f,
//   0xfc, 0xff, 0x3f, 0x00, 0x00, 0xf8, 0xff, 0x1f, 0xf0, 0xff, 0x1f, 0x00,
//   0x00, 0xf0, 0xff, 0x07, 0xc0, 0xff, 0x0f, 0x00, 0x00, 0xe0, 0xff, 0x01,
//   0x00, 0xfe, 0x03, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00,
//   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
// };


void drawflower();
void drawTime();
void testPump(uint8_t delay);

/* Internal functions */
void reboot();
Alarms * getAlarms();
void resetAlarms();
/* Gert liters pumperd per minute by plants by a given amount of active plants*/
float getLitersPumpedPerMinutePerPlant(uint8_t plants);
/* Get number of plants*/
uint8_t getPlants();
/* Get Pot size by por number*/
uint8_t getPotSize(uint8_t pot);
/* Get Active alarm by number */
uint8_t getActiveAlarm(uint8_t alarmNumber = 0);
uint8_t getLitersPerMinute();
void setActiveAlarms(uint8_t alarmNumber = 0);
void toggleActiveAlarms(uint8_t alarmNumber = 0);
SensorCalibration getSensortCalibrationData(uint8_t sensor);
void setLitersPumpedPerMinute(uint8_t liters);
void setPlants(uint8_t number);
void setPotSize(uint8_t pot, uint8_t size);
void setAlarmRepeat(uint8_t alarmNumber, timeDayOfWeek_t DOW, int H, int M, int S);
time_t syncProvider();
void draw_elecrow(void);
void MorningAlarm();
void pumpWater();
struct MoiustureSensorData readMoistureSensors();
char * printDow(timeDayOfWeek_t dow);
void drawTH(uint8_t plants);
void printAlarms(SerialCommands *sender);
void printInfo();

/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************
 * 
 * Commands
 * 
 *****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/

void cmdHelp(SerialCommands *sender);
void cmdTestPump(SerialCommands *sender);
void cmdGetSetTimeAndDate(SerialCommands *sender);
void cmdReboot(SerialCommands *sender);
void cmdGetSetAlarms(SerialCommands *sender);
void getSoilMoistureSensorData(SerialCommands *sender);
void cmdUnrecognized(SerialCommands* sender, const char* cmd);

SerialCommand cmdHelp_("HP", cmdHelp);
SerialCommand cmdTestPump_("TP", cmdTestPump);
SerialCommand cmdSetTimeAndDate_("TM", cmdGetSetTimeAndDate);
SerialCommand cmdReboot_("RB", cmdReboot);
SerialCommand cmdSoilMoistureSensorData_("MS", getSoilMoistureSensorData);
SerialCommand cmdGetSetAlarms_("ALX", cmdGetSetAlarms);

// #if debug
// check free ram
int freeRam() {
  extern int __heap_start, *__brkval; 
  int v; 
  return (int) &v - (__brkval == 0 ? (int) &__heap_start : (int) __brkval); 
}
// #endif

